# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  userId: String!
  userEmail: String!
  password: String!
  nickname: String!
  userActive: Int!
  userKeynote: Int!
  userMmr: Int!
  userPoint: Int!
  character: String!
  deletedAt: DateTime
  refreshToken: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FriendDto {
  userId: String!
  nickname: String!
  userActive: Int!
  userMmr: Int!
  character: String!
  userTier: String!
}

type RequestDto {
  senderId: String!
  senderNickname: String!
  receivedAt: DateTime!
}

type SearchFriendDto {
  userId: String!
  userMmr: Int!
  userTier: String!
  nickname: String!
  userActive: Int!
  character: String!
}

type GameSongDto {
  songId: Int!
  songTitle: String!
  singer: String!
  songLyrics: String!
  songGender: Boolean!
  songMale: String!
  songMaleUp: String!
  songMaleDown: String!
  songFemale: String!
  songFemaleUp: String!
  songFemaleDown: String!
  vocalMale: String!
  vocalMaleUp: String!
  vocalMaleDown: String!
}

type Reply {
  message: String!
  code: Int!
}

type AuthUserDto {
  userId: String!
  userEmail: String!
  nickname: String!
  userActive: Int!
  userKeynote: Int!
  userMmr: Int!
  userPoint: Int!
  character: String!
  userTier: String!
}

type AuthDto {
  accessToken: String!
  user: User!
}

type AuthTokenDto {
  accessToken: String!
}

type UserCharacterResponseDto {
  userId: String!
  character: characterEnum!
}

enum characterEnum {
  BELUGA
  PUMA
  HUSKY
  HARE
  LYNX
  LEOPARD
  NARWHAL
  PUFFIN
  MOOSE
}

type UserKeynoteResponseDto {
  userId: String!
  userKeynote: Int!
}

type ReplayWithSongInfo {
  replayId: Int!
  createdAt: DateTime!
  isPublic: Int!
  songTitle: String!
  singer: String!
}

type ReplayIsPublicResponseDto {
  replayId: String!
  isPublic: Int!
}

type Query {
  searchSong(keyword: String!, page: Int!, filter: String!): [GameSongDto!]!
  getNotification(userId: String!, page: Int!): [RequestDto!]!
  searchFriend(userId: String!, nickname: String!, page: Int!): [SearchFriendDto!]!
  searchUser(userId: String!, nickname: String!, page: Int!): [FriendDto!]!
  isEmailTaken(userEmail: String!): Boolean!
  isNicknameTaken(nickname: String!): Boolean!
  fetchUser: AuthUserDto!
  fetchUserByUserId(userId: String!): AuthUserDto!
  getUserReplays(isMyReplay: Boolean!, pageNumber: Int!, userId: String!): [ReplayWithSongInfo!]!
}

type Mutation {
  saveReplay(userVocal: String!, userId: String!): Reply!
  addFriend(addFriendDto: AddFriendDto!): String!
  removeFriend(addFriendDto: AddFriendDto!): String!
  inviteFriend(friendId: String!, hostUserDto: HostUserInput!): String!
  friendRequest(notificationDto: NotificationDto!): String!
  deleteNotification(notificationDto: NotificationDto!): String!
  registerUser(newUser: UserRegisterDto!): AuthDto!
  registerUserWithKakao(kakaoUserResponse: KakaoUserResponseDto!, nickname: String!): AuthDto!
  registerUserWithGoogle(googleUserDto: GoogleUserResponseDto!, nickname: String!): AuthDto!
  loginUser(userAuthDto: UserAuthDto!): AuthDto!
  loginUserWithKakao(kakaoUserResponse: KakaoUserResponseDto!): AuthDto!
  loginUserWithGoogle(googleUserResponse: GoogleUserResponseDto!): AuthDto!
  refreshAccessToken: AuthTokenDto!
  logout(userId: String!): String!
  updateCharacter(userId: String!, character: String!): UserCharacterResponseDto!
  updateUserKeynote(userId: String!, keynote: userKeynoteStatus!): UserKeynoteResponseDto!
  updateReplayIsPublic(replayId: Int!, isPublic: Int!): ReplayIsPublicResponseDto!
}

input AddFriendDto {
  userId: String!
  friendId: String!
}

input HostUserInput {
  userId: String!
  nickname: String!
}

input NotificationDto {
  userId: String!
  senderId: String!
}

input UserRegisterDto {
  userEmail: String!
  password: String
  nickname: String!
}

input KakaoUserResponseDto {
  id: String!
  kakao_account: KakaoAccount!
}

input KakaoAccount {
  email: String!
}

input GoogleUserResponseDto {
  googleId: String!
  google_account: GoogleAccount!
}

input GoogleAccount {
  email: String!
}

input UserAuthDto {
  userEmail: String!
  password: String!
}

enum userKeynoteStatus {
  ORIGINAL_KEY
  FEMALE_KEY
  MALE_KEY
}